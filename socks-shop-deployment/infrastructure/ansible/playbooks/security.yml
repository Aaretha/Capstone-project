---
- name: Set Up Security Measures
  hosts: localhost
  tasks:

    # Task 1: Install cert-manager
    # This task installs cert-manager, a Kubernetes add-on to automate the management and issuance of TLS certificates.
    # The shell command uses kubectl to apply the cert-manager manifest from the official GitHub repository.
    - name: Install cert-manager
      shell: kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.2/cert-manager.yaml

    # Task 2: Configure Let's Encrypt ClusterIssuer
    # This task creates a ClusterIssuer resource in Kubernetes, which defines how cert-manager should request TLS certificates from Let's Encrypt.
    # The configuration includes the ACME protocol details, email for notifications, and solver configuration using the NGINX ingress controller.
    - name: Configure Let's Encrypt ClusterIssuer
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt-prod
            namespace: cert-manager
          spec:
            acme:
              server: https://acme-v02.api.letsencrypt.org/directory
              email: thearethra@gmail.com
              privateKeySecretRef:
                name: letsencrypt-prod
              solvers:
              - http01:
                  ingress:
                    class: nginx

    # Task 3: Apply Ingress with TLS
    # This task creates an Ingress resource with TLS enabled for the specified domain. 
    # The Ingress uses the Let's Encrypt certificate managed by cert-manager to secure traffic to the socks-shop application.
    - name: Apply Ingress with TLS
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: socks-shop-ingress
            namespace: default
            annotations:
              cert-manager.io/cluster-issuer: "letsencrypt-prod"
          spec:
            tls:
            - hosts:
              - geegeeg.blogspot.com
              secretName: socks-shop-tls
            rules:
            - host: geegeeg.blogspot.com
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: front-end
                      port:
                        number: 80

    # Task 4: Apply NetworkPolicy
    # This task defines a NetworkPolicy to restrict incoming traffic to the socks-shop application.
    # Only pods with the label "app: socks-shop" are allowed to communicate with other "socks-shop" pods on port 80.
    - name: Apply NetworkPolicy
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: NetworkPolicy
          metadata:
            name: allow-socks-shop
            namespace: default
          spec:
            podSelector:
              matchLabels:
                app: socks-shop
            policyTypes:
            - Ingress
            ingress:
            - from:
              - podSelector:
                  matchLabels:
                    app: socks-shop
              ports:
              - protocol: TCP
                port: 80
